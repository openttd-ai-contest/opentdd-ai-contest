/*
 * OpenTTD Content API
 *
 * OpenTTD Content API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ContentType {
    #[serde(rename = "ai")]
    Ai,
    #[serde(rename = "ai-library")]
    AiLibrary,
    #[serde(rename = "base-graphics")]
    BaseGraphics,
    #[serde(rename = "base-music")]
    BaseMusic,
    #[serde(rename = "base-sounds")]
    BaseSounds,
    #[serde(rename = "game-script")]
    GameScript,
    #[serde(rename = "game-script-library")]
    GameScriptLibrary,
    #[serde(rename = "heightmap")]
    Heightmap,
    #[serde(rename = "newgrf")]
    Newgrf,
    #[serde(rename = "scenario")]
    Scenario,

}

impl std::fmt::Display for ContentType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Ai => write!(f, "ai"),
            Self::AiLibrary => write!(f, "ai-library"),
            Self::BaseGraphics => write!(f, "base-graphics"),
            Self::BaseMusic => write!(f, "base-music"),
            Self::BaseSounds => write!(f, "base-sounds"),
            Self::GameScript => write!(f, "game-script"),
            Self::GameScriptLibrary => write!(f, "game-script-library"),
            Self::Heightmap => write!(f, "heightmap"),
            Self::Newgrf => write!(f, "newgrf"),
            Self::Scenario => write!(f, "scenario"),
        }
    }
}

impl Default for ContentType {
    fn default() -> ContentType {
        Self::Ai
    }
}

